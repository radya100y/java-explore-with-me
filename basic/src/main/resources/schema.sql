drop table if exists public.collection_message;
drop table if exists public.collection;
drop table if exists public.request;
drop table if exists public.message;
drop table if exists public.category;

create table if not exists public.users
(
    id bigint generated by default as identity not null primary key
    , name varchar(256) not null
    , email varchar(512) not null
    , constraint UQ_USER_EMAIL unique (email)
);

create table if not exists public.category
(
    id bigint generated by default as identity not null primary key
    , name varchar(256) not null
);

create table if not exists public.message
(
    id bigint generated by default as identity not null primary key
    , annotation varchar(256)
    , category bigint references category(id) on delete cascade
    , description varchar(1024)
    , event_date /*eventDate*/ timestamptz
    , lat float
    , lon float
    , paid bool
    , participant_limit /*participantLimit*/ int
    , request_moderation /*requestModeration*/ bool
    , title varchar(512)
    , created_on /*createdOn*/ timestamptz default now()
    , published_on /*publishedOn*/ timestamptz
    , initiator bigint references users(id) on delete cascade
);

create type if not exists request_status as enum('PENDING', 'APPROVED', 'REJECTED');
create table if not exists public.request
(
    id bigint generated by default as identity not null primary key
    , message_id /*event*/ bigint not null references message(id) on delete cascade
    , user_id /*requester*/ bigint references users(id) on delete cascade
    , created_on /*created*/ timestamptz default now()
    , status request_status not null default 'PENDING'
);

create table if not exists public.collection
(
    id bigint generated by default as identity not null primary key
    , pinned bool not null
    , title varchar(512) not null
);

create table if not exists public.collection_message
(
    id bigint generated by default as identity not null primary key
    , collection_id bigint not null references collection(id) on delete cascade
    , message_id bigint not null references message(id) on delete cascade
);